{"version":3,"sources":["components/img.js","components/nav.js","pages/game.js","App.js","serviceWorker.js","index.js"],"names":["Image","state","clicked","src","_this","props","handleClick","event","console","log","preventDefault","endGame","setState","shuffle","incrementScore","react_default","a","createElement","this","id","alt","onClick","Component","Nav","className","href","currentScore","highScore","Game","pokemon","alert","updatePokemon","forEach","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","pokeArray","target","getAttribute","clickedPokemon","find","poke","parseInt","_this2","map","img","key","reset","App","game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a09eb5e6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\n\r\nclass Image extends Component {\r\n    state = {\r\n        clicked: false,\r\n        src: this.props.src\r\n    }\r\n    \r\n    \r\n\r\n    handleClick = event => {\r\n        console.log(\"click\");\r\n        event.preventDefault();\r\n\r\n        //end the game if image has already been clicked\r\n        if(this.state.clicked){\r\n            this.props.endGame();\r\n        }\r\n        //set clicked to true and shuffle\r\n        else{\r\n            this.setState({ clicked: true });\r\n            this.props.shuffle();\r\n            this.props.incrementScore();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img src={this.props.src} id={this.props.id} alt={this.props.src} onClick={this.props.handleClick}></img> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Image;\r\n// export default function Img(props) {\r\n//     handleClick = (event) => {\r\n\r\n//         this.setState({play: false});\r\n//         this.clicked ? Game.endGame() : event.target.setState({ clicked: true });\r\n\r\n//     }\r\n\r\n//     return (\r\n//         <img src={props.src} alt={props.src} onClick={handleClick()}></img> \r\n//     )\r\n// }","import React from \"react\";\r\n\r\nexport default function Nav(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                Clicky Game\r\n          </a>\r\n            <span className=\"float-right text-light\">\r\n                Score: {props.currentScore}\r\n                High Score: {props.highScore}\r\n\r\n            </span>\r\n\r\n        </nav>\r\n    );\r\n}","import React, { Component } from \"react\";\r\nimport Img from \"../components/img\";\r\nimport Nav from \"../components/nav\";\r\nimport pokemon from \"../pokemon.json\";\r\n\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        currentScore: 0,\r\n        highScore: 0,\r\n        pokemon: pokemon\r\n    }\r\n\r\n    endGame = () => {\r\n        alert(\"game over\");\r\n        if(this.state.currentScore > this.state.highScore){\r\n            this.setState({highScore: this.state.currentScore });\r\n        }\r\n        this.setState({ currentScore: 0 });\r\n\r\n        let updatePokemon = this.state.pokemon;\r\n        updatePokemon.forEach(pokemon => pokemon.clicked = false);\r\n        this.setState({ pokemon: updatePokemon});\r\n        this.shuffle();\r\n    }\r\n\r\n    shuffle = () => {\r\n        //Fisher-Yates (aka Knuth) Shuffle.\r\n        function shuffle(array) {\r\n            var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n            // While there remain elements to shuffle...\r\n            while (0 !== currentIndex) {\r\n\r\n                // Pick a remaining element...\r\n                randomIndex = Math.floor(Math.random() * currentIndex);\r\n                currentIndex -= 1;\r\n\r\n                // And swap it with the current element.\r\n                temporaryValue = array[currentIndex];\r\n                array[currentIndex] = array[randomIndex];\r\n                array[randomIndex] = temporaryValue;\r\n            }\r\n\r\n            return array;\r\n        }\r\n        this.setState({ pokemon: shuffle(this.state.pokemon) });\r\n    }\r\n\r\n    incrementScore = () => {\r\n        this.setState({ currentScore: this.state.currentScore + 1 })\r\n    }\r\n\r\n    handleClick = event => {\r\n        event.preventDefault();\r\n        let pokeArray = this.state.pokemon;\r\n\r\n        const id = event.target.getAttribute(\"id\");\r\n        let clickedPokemon = pokeArray.find(poke => {\r\n            return poke.id === parseInt(id)\r\n        });\r\n        \r\n\r\n        //end the game if image has already been clicked\r\n        if(clickedPokemon.clicked){\r\n            this.endGame();\r\n        }\r\n        //set clicked to true and shuffle\r\n        else{\r\n            clickedPokemon.clicked = true;\r\n            // event.target.setState({ clicked: true });\r\n            this.setState({pokemon: pokeArray})\r\n            this.shuffle();\r\n            this.incrementScore();\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                    <Nav currentScore={this.state.currentScore} highScore={this.state.highScore}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <div>\r\n                            {this.state.pokemon.map(pokemon => {\r\n                                return (\r\n                                    <Img key={pokemon.id} id={pokemon.id} src={pokemon.src} handleClick={this.handleClick} endGame={this.endGame} shuffle={this.shuffle} incrementScore={this.incrementScore} reset={this.reset} />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n\r\n// \"../images/Bulbasaur.png\",\r\n//             \"../images/Charmander.png\",\r\n//             \"../images/Chespin.png\",\r\n//             \"../images/Chikorita.png\",\r\n//             \"../images/Chimchar.png\",\r\n//             \"../images/Cyndaquil.png\",\r\n//             \"../images/Fennekin.png\",\r\n//             \"../images/Froakie.png\",\r\n//             \"../images/Grookey.png\",\r\n//             \"../images/Litten.png\",\r\n//             \"../images/Mudkip.png\",\r\n//             \"../images/Oshawott.png\",\r\n//             \"../images/Piplup.png\",\r\n//             \"../images/Popplio.png\",\r\n//             \"../images/Rowlet.png\",\r\n//             \"../images/Scorbunny.png\",\r\n//             \"../images/Snivy.png\",\r\n//             \"../images/Sobble.png\",\r\n//             \"../images/Squirtle.png\",\r\n//             \"../images/Tepig.png\",\r\n//             \"../images/Torchic.png\",\r\n//             \"../images/Totodile.png\",\r\n//             \"../images/Treecko.png\",\r\n//             \"../images/Turtwig.png\",","import React from 'react';\r\nimport './App.css';\r\nimport Game from \"./pages/game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}