{"version":3,"sources":["components/img.js","components/nav.js","pages/game.js","components/modal.js","App.js","serviceWorker.js","index.js"],"names":["style","width","height","margin","Image","state","clicked","src","_this","props","handleClick","event","console","log","preventDefault","endGame","setState","shuffle","incrementScore","react_default","a","createElement","this","id","alt","onClick","Component","Nav","className","href","currentScore","highScore","toggleModal","Game","pokemon","map","img","key","reset","showModal","hide","Modal","modalOpen","tabIndex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","bgPattern","background","toggle","App","alert","updatePokemon","forEach","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","e","pokeArray","target","getAttribute","clickedPokemon","find","poke","parseInt","_this2","game","stuffle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aae3f74e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst style = {\r\n    width: \"15%\",\r\n    height: \"auto\",\r\n    margin: \"3px\"\r\n}\r\n\r\nclass Image extends Component {\r\n    state = {\r\n        clicked: false,\r\n        src: this.props.src\r\n    }\r\n    \r\n    \r\n\r\n    handleClick = event => {\r\n        console.log(\"click\");\r\n        event.preventDefault();\r\n\r\n        //end the game if image has already been clicked\r\n        if(this.state.clicked){\r\n            this.props.endGame();\r\n        }\r\n        //set clicked to true and shuffle\r\n        else{\r\n            this.setState({ clicked: true });\r\n            this.props.shuffle();\r\n            this.props.incrementScore();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img src={this.props.src} id={this.props.id} alt={this.props.src} onClick={this.props.handleClick} style={style}></img> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Image;\r\n// export default function Img(props) {\r\n//     handleClick = (event) => {\r\n\r\n//         this.setState({play: false});\r\n//         this.clicked ? Game.endGame() : event.target.setState({ clicked: true });\r\n\r\n//     }\r\n\r\n//     return (\r\n//         <img src={props.src} alt={props.src} onClick={handleClick()}></img> \r\n//     )\r\n// }","import React from \"react\";\r\n\r\nexport default function Nav(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-danger d-flex\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                Pokemon Memory Game\r\n          </a>\r\n            <span className=\"text-light\">\r\n               <span className=\"m-2\">Score: {props.currentScore}</span> \r\n                <span className=\"m-2\">High Score: {props.highScore}</span>\r\n\r\n            </span>\r\n            <span className=\"ml-auto mr-2\">\r\n            <button className=\"btn btn-outline-light mr-2\" onClick={() => props.toggleModal()}>About</button>\r\n            </span>\r\n            \r\n\r\n        </nav>\r\n    );\r\n}","import React from \"react\";\r\nimport Img from \"../components/img\";\r\nimport Nav from \"../components/nav\";\r\n\r\n\r\n\r\nfunction Game(props) {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <Nav currentScore={props.currentScore} highScore={props.highScore} toggleModal={props.toggleModal} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row container mx-auto mt-5\">\r\n                <div className=\"col-12 text-center bg-white p-3\">\r\n                    {props.pokemon.map(pokemon => {\r\n                        return (\r\n                            <Img key={pokemon.id} id={pokemon.id} src={pokemon.src} handleClick={props.handleClick} endGame={props.endGame} shuffle={props.shuffle} incrementScore={props.incrementScore} reset={props.reset} />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;\r\n\r\n// \"../images/Bulbasaur.png\",\r\n//             \"../images/Charmander.png\",\r\n//             \"../images/Chespin.png\",\r\n//             \"../images/Chikorita.png\",\r\n//             \"../images/Chimchar.png\",\r\n//             \"../images/Cyndaquil.png\",\r\n//             \"../images/Fennekin.png\",\r\n//             \"../images/Froakie.png\",\r\n//             \"../images/Grookey.png\",\r\n//             \"../images/Litten.png\",\r\n//             \"../images/Mudkip.png\",\r\n//             \"../images/Oshawott.png\",\r\n//             \"../images/Piplup.png\",\r\n//             \"../images/Popplio.png\",\r\n//             \"../images/Rowlet.png\",\r\n//             \"../images/Scorbunny.png\",\r\n//             \"../images/Snivy.png\",\r\n//             \"../images/Sobble.png\",\r\n//             \"../images/Squirtle.png\",\r\n//             \"../images/Tepig.png\",\r\n//             \"../images/Torchic.png\",\r\n//             \"../images/Totodile.png\",\r\n//             \"../images/Treecko.png\",\r\n//             \"../images/Turtwig.png\",","import React from \"react\";\r\n\r\nconst showModal = \"modal fade show d-block\";\r\nconst hide = \"d-none\";\r\nexport default function Modal(props) {\r\n    return (\r\n        <div className={props.modalOpen ? showModal : hide} id=\"instructionsModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"instructionsModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h4 className=\"modal-title\" id=\"instructionsModalLabel\">About</h4>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={() => props.toggleModal()}>\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <h5 className=\"modal-title\">How to Play</h5>\r\n                        <ul>\r\n                            <li>The goal of the game is to click each pokemon <strong>one time</strong>. </li>\r\n                            <li>Every time you click a pokemon they all get shuffled, so make sure to keep track of who you've already clicked!</li>\r\n                            <li>Once you click the same pokemon twice it's game over.</li>\r\n                        </ul>\r\n                        <h5 className=\"modal-title\">About the Game</h5>\r\n                        <p>This game was created using React and Bootstrap. View the code or fork the repo on <a href=\"https://github.com/kiriwilliams/pokemon-memory-game/tree/master\">github.com/kiriwilliams</a></p>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => props.toggleModal()}>Let's play!</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Game from \"./pages/game\";\r\nimport Modal from \"./components/modal\";\r\nimport pokemon from \"./pokemon.json\";\r\n// import { url } from 'inspector';\r\n\r\nconst bgPattern = {\r\n  background: 'url(\"./images/blu_stripes.png\") repeat'\r\n};\r\nconst toggle = true;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentScore: 0,\r\n    highScore: 0,\r\n    pokemon: pokemon,\r\n    modalOpen: toggle\r\n  }\r\n\r\n  endGame = () => {\r\n    alert(\"game over\");\r\n    if (this.state.currentScore > this.state.highScore) {\r\n      this.setState({ highScore: this.state.currentScore });\r\n    }\r\n    this.setState({ currentScore: 0 });\r\n\r\n    let updatePokemon = this.state.pokemon;\r\n    updatePokemon.forEach(pokemon => pokemon.clicked = false);\r\n    this.setState({ pokemon: updatePokemon });\r\n    this.shuffle();\r\n  }\r\n\r\n  shuffle = () => {\r\n    //Fisher-Yates (aka Knuth) Shuffle.\r\n    function shuffle(array) {\r\n      var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n      // While there remain elements to shuffle...\r\n      while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n\r\n      return array;\r\n    }\r\n    this.setState({ pokemon: shuffle(this.state.pokemon) });\r\n  }\r\n\r\n  incrementScore = () => {\r\n    this.setState({ currentScore: this.state.currentScore + 1 })\r\n  }\r\n\r\n  toggleModal = (e) => {\r\n    const toggle = this.state.modalOpen ? false : true;\r\n    this.setState({ modalOpen: toggle });\r\n  }\r\n\r\n  handleClick = event => {\r\n    event.preventDefault();\r\n    let pokeArray = this.state.pokemon;\r\n\r\n    const id = event.target.getAttribute(\"id\");\r\n    let clickedPokemon = pokeArray.find(poke => {\r\n      return poke.id === parseInt(id)\r\n    });\r\n\r\n\r\n    //end the game if image has already been clicked\r\n    if (clickedPokemon.clicked) {\r\n      this.endGame();\r\n    }\r\n    //set clicked to true and shuffle\r\n    else {\r\n      clickedPokemon.clicked = true;\r\n      // event.target.setState({ clicked: true });\r\n      this.setState({ pokemon: pokeArray })\r\n      this.shuffle();\r\n      this.incrementScore();\r\n    }\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={bgPattern} className=\"h-100\">\r\n        <Game currentScore={this.state.currentScore} highScore={this.state.highScore} toggleModal={this.toggleModal} pokemon={this.state.pokemon} handleClick={this.handleClick} endGame={this.endGame} shuffle={this.stuffle} incrementScore={this.incrementScore} reset={this.reset} />\r\n\r\n        <Modal modalOpen={this.state.modalOpen} toggleModal={this.toggleModal}/>\r\n        <div className={this.state.modalOpen ? \"modal-backdrop\" : \"d-none\"} onClick={() => this.toggleModal()}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}