{"version":3,"sources":["components/img.js","components/nav.js","pages/game.js","components/modal.js","App.js","serviceWorker.js","index.js"],"names":["style","width","height","margin","Image","state","clicked","src","_this","props","handleClick","event","console","log","preventDefault","endGame","setState","shuffle","incrementScore","react_default","a","createElement","this","id","alt","onClick","Component","Nav","className","href","currentLevel","currentPoints","highScore","toggleModal","Game","pokemon","map","img","key","reset","showModal","hide","Modal","modalName","name","modalLabel","modalOpen","tabIndex","role","aria-labelledby","aria-hidden","title","type","data-dismiss","aria-label","children","button","bgPattern","background","toggle","parseInt","localStorage","getItem","App","currentScore","level","aboutOpen","levelOpen","winOpen","componentDidMount","activePokemon","slice","e","alert","setItem","updatePokemon","clearClicks","array","forEach","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","newScore","nextLevel","modal","pokeArray","target","getAttribute","clickedPokemon","find","poke","lvl","quantity","_this2","game","stuffle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b1ece10.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst style = {\r\n    width: \"15%\",\r\n    height: \"auto\",\r\n    margin: \"3px\"\r\n}\r\n\r\nclass Image extends Component {\r\n    state = {\r\n        clicked: false,\r\n        src: this.props.src\r\n    }\r\n    \r\n    \r\n\r\n    handleClick = event => {\r\n        console.log(\"click\");\r\n        event.preventDefault();\r\n\r\n        //end the game if image has already been clicked\r\n        if(this.state.clicked){\r\n            this.props.endGame();\r\n        }\r\n        //set clicked to true and shuffle\r\n        else{\r\n            this.setState({ clicked: true });\r\n            this.props.shuffle();\r\n            this.props.incrementScore();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img src={this.props.src} id={this.props.id} alt={this.props.src} onClick={this.props.handleClick} style={style}></img> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Image;\r\n// export default function Img(props) {\r\n//     handleClick = (event) => {\r\n\r\n//         this.setState({play: false});\r\n//         this.clicked ? Game.endGame() : event.target.setState({ clicked: true });\r\n\r\n//     }\r\n\r\n//     return (\r\n//         <img src={props.src} alt={props.src} onClick={handleClick()}></img> \r\n//     )\r\n// }","import React from \"react\";\r\n\r\nexport default function Nav(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-danger d-flex\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                Pokemon Memory Game\r\n          </a>\r\n            <span className=\"text-light\">\r\n               <span className=\"m-2\">Level: {props.currentLevel}</span> \r\n               <span className=\"m-2\">Score: {props.currentPoints} </span>\r\n                <span className=\"m-2\">High Score: {props.highScore}</span>\r\n\r\n\r\n            </span>\r\n            <span className=\"ml-auto mr-2\">\r\n            <button className=\"btn btn-outline-light mr-2\" onClick={() => props.toggleModal(\"about\")}>About</button>\r\n            </span>\r\n            \r\n\r\n        </nav>\r\n    );\r\n}","import React from \"react\";\r\nimport Img from \"../components/img\";\r\nimport Nav from \"../components/nav\";\r\n\r\n\r\n\r\nfunction Game(props) {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <Nav currentLevel={props.currentLevel} currentPoints={props.currentPoints} highScore={props.highScore} toggleModal={props.toggleModal} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row container mx-auto mt-5\">\r\n                <div className=\"col-12 text-center bg-white p-3\">\r\n                    {props.pokemon.map(pokemon => {\r\n                        return (\r\n                            <Img key={pokemon.id} id={pokemon.id} src={pokemon.src} handleClick={props.handleClick} endGame={props.endGame} shuffle={props.shuffle} incrementScore={props.incrementScore} reset={props.reset} />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;\r\n\r\n// \"../images/Bulbasaur.png\",\r\n//             \"../images/Charmander.png\",\r\n//             \"../images/Chespin.png\",\r\n//             \"../images/Chikorita.png\",\r\n//             \"../images/Chimchar.png\",\r\n//             \"../images/Cyndaquil.png\",\r\n//             \"../images/Fennekin.png\",\r\n//             \"../images/Froakie.png\",\r\n//             \"../images/Grookey.png\",\r\n//             \"../images/Litten.png\",\r\n//             \"../images/Mudkip.png\",\r\n//             \"../images/Oshawott.png\",\r\n//             \"../images/Piplup.png\",\r\n//             \"../images/Popplio.png\",\r\n//             \"../images/Rowlet.png\",\r\n//             \"../images/Scorbunny.png\",\r\n//             \"../images/Snivy.png\",\r\n//             \"../images/Sobble.png\",\r\n//             \"../images/Squirtle.png\",\r\n//             \"../images/Tepig.png\",\r\n//             \"../images/Torchic.png\",\r\n//             \"../images/Totodile.png\",\r\n//             \"../images/Treecko.png\",\r\n//             \"../images/Turtwig.png\",","import React from \"react\";\r\n\r\nconst showModal = \"modal fade show d-block\";\r\nconst hide = \"d-none\";\r\n\r\n\r\nfunction Modal(props) {\r\n    \r\n    const modalName = props.name + \"Modal\";\r\n    const modalLabel = props.name + \"Label\";\r\n    \r\n        return (\r\n            <div className={props.modalOpen ? showModal : hide} id={modalName} tabIndex=\"-1\" role=\"dialog\" aria-labelledby={modalLabel} aria-hidden=\"true\">\r\n                <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h4 className=\"modal-title\" id={modalLabel}>{props.title}</h4>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={() => props.toggleModal(props.name)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n\r\n                        {/* Body */}\r\n                        <div className=\"modal-body\">\r\n                            {props.children}\r\n                        </div>\r\n\r\n                        {/* Footer */}\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={() => props.button(props.name)}>Let's play!</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Game from \"./pages/game\";\r\nimport Modal from \"./components/modal\";\r\nimport pokemon from \"./pokemon.json\";\r\n// import { url } from 'inspector';\r\n\r\nconst bgPattern = {\r\n  background: 'url(\"./images/blu_stripes.png\") repeat'\r\n};\r\nconst toggle = true;\r\nconst highScore = parseInt(localStorage.getItem(\"highScore\")) || 0;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentScore: 0,\r\n    currentPoints: 0,\r\n    highScore: highScore,\r\n    level: 1,\r\n    pokemon: pokemon,\r\n    aboutOpen: toggle,\r\n    levelOpen: false,\r\n    winOpen: false\r\n\r\n\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let activePokemon = this.shuffle(pokemon);\r\n    this.setState({ pokemon: activePokemon.slice(0, 4),     modalOpen: this.state.aboutOpen || this.state.levelOpen })\r\n  }\r\n\r\n  //Ends the game\r\n  //sets high score\r\n  //resets game to play again\r\n  endGame = (e) => {\r\n    alert(\"game over\");\r\n    if(e === \"win\"){\r\n      this.toggleModal(\"win\");\r\n    }\r\n    \r\n    if (this.state.currentPoints > this.state.highScore) {\r\n      this.setState({ highScore: this.state.currentPoints });\r\n    }\r\n    localStorage.setItem(\"highScore\",this.state.highScore);\r\n\r\n    this.setState({ currentScore: 0, currentPoints: 0, level: 1 });\r\n\r\n    let updatePokemon = this.clearClicks(pokemon);\r\n\r\n    this.setState({ pokemon: this.shuffle(updatePokemon).slice(0, 4) });\r\n  }\r\n\r\n  clearClicks = (array) => {\r\n    array.forEach(pokemon => pokemon.clicked = false);\r\n    return array;\r\n  }\r\n\r\n  //Fisher-Yates (aka Knuth) Shuffle.\r\n  shuffle = (array) => {\r\n\r\n\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  //increases the score in the state and update level if necessary\r\n  incrementScore = () => {\r\n    let newScore = this.state.currentScore + 1;\r\n\r\n    this.setState({ currentScore: newScore, currentPoints: this.state.currentPoints + 1 });\r\n\r\n    if (this.state.currentPoints >= this.state.highScore) {\r\n      this.setState({ highScore: newScore });\r\n\r\n    }\r\n    localStorage.setItem(\"highScore\",this.state.highScore);\r\n    //checks score at different points and sets level\r\n    switch (this.state.currentScore) {\r\n      case 3:\r\n        this.nextLevel(2, 9);\r\n        break;\r\n      case 12:\r\n        this.nextLevel(3, 12);\r\n        break;\r\n      case 24:\r\n        this.nextLevel(4, 24);\r\n        break;\r\n      case 47:\r\n        this.toggleModal(\"win\");\r\n        break;\r\n      default: \r\n        return;\r\n    }\r\n  }\r\n\r\n  //sets the level and determines how many images are in play\r\n  nextLevel(lvl, quantity) {\r\n\r\n    //show modal to inform user of level up\r\n    this.toggleModal(\"level\");\r\n\r\n    //update the level and quantity of pokemon in play\r\n    this.setState({ level: lvl, pokemon: this.clearClicks(this.shuffle(pokemon).slice(0, quantity)) });\r\n  }\r\n\r\n  //toggles modals. takes one string to identify which modal to toggle.\r\n  toggleModal = (modal) => {\r\n    let toggle;\r\n    switch(modal){\r\n      case \"about\":\r\n          toggle = this.state.aboutOpen ? false : true;\r\n          this.setState({ aboutOpen: toggle });\r\n        break;\r\n      case \"level\":\r\n          toggle = this.state.levelOpen ? false : true;\r\n          this.setState({ levelOpen: toggle });\r\n        break;\r\n      case \"win\":\r\n        toggle = this.state.winOpen ? false : true;\r\n        this.setState({ winOpen: toggle });\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n  }\r\n\r\n  handleClick = event => {\r\n    event.preventDefault();\r\n    let pokeArray = this.state.pokemon;\r\n\r\n    const id = event.target.getAttribute(\"id\");\r\n    let clickedPokemon = pokeArray.find(poke => {\r\n      return poke.id === parseInt(id)\r\n    });\r\n\r\n\r\n    //end the game if image has already been clicked\r\n    if (clickedPokemon.clicked) {\r\n      this.endGame();\r\n    }\r\n    //set clicked to true and shuffle\r\n    else {\r\n      clickedPokemon.clicked = true;\r\n      // event.target.setState({ clicked: true });\r\n      this.setState({ pokemon: this.shuffle(pokeArray) })\r\n      this.incrementScore();\r\n    }\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={bgPattern} className=\"h-100\">\r\n        <Game currentLevel={this.state.level} currentPoints={this.state.currentPoints} highScore={this.state.highScore} toggleModal={this.toggleModal} pokemon={this.state.pokemon} handleClick={this.handleClick} endGame={this.endGame} shuffle={this.stuffle} incrementScore={this.incrementScore} reset={this.reset} />\r\n\r\n\r\n        {/* About Modal - instructions/link to github */}\r\n        <Modal name={\"about\"} title={\"About\"} modalOpen={this.state.aboutOpen} toggleModal={this.toggleModal} button={this.toggleModal}>\r\n\r\n            <h5 className=\"modal-title\">How to Play</h5>\r\n            <ul>\r\n              <li>The goal of the game is to click each pokemon <strong>one time</strong>. </li>\r\n              <li>Every time you click a pokemon they all get shuffled, so make sure to keep track of who you've already clicked!</li>\r\n              <li>Once you click the same pokemon twice it's game over.</li>\r\n            </ul>\r\n            <h5 className=\"modal-title\">About the Game</h5>\r\n            <p>This game was created using React and Bootstrap. View the code or fork the repo on <a href=\"https://github.com/kiriwilliams/pokemon-memory-game/tree/master\">github.com/kiriwilliams</a></p>\r\n        </Modal>\r\n\r\n        {/* Level Modal */}\r\n        <Modal name={\"level\"} title={\"Level Up!\"} modalOpen={this.state.levelOpen} toggleModal={this.toggleModal} button={this.toggleModal}>\r\n          Ready for level {this.state.level}?\r\n        </Modal>\r\n\r\n\r\n        {/* Win Modal */}\r\n        <Modal name={\"win\"} title={\"You Win!\"} modalOpen={this.state.winOpen} toggleModal={this.toggleModal} button={this.endGame}>\r\n         Congratulations! You won the entire game!!\r\n        </Modal>\r\n\r\n        {/* Modal Backdrop */}\r\n        <div className={this.state.aboutOpen || this.state.levelOpen ?  \"modal-backdrop\" : \"d-none\"} onClick={() => this.toggleModal(this.state.aboutOpen ? \"about\" : \"level\")}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}